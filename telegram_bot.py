import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import requests
import tempfile
import os
from PIL import Image
import imagehash

TELEGRAM_TOKEN = "7911469039:AAFbpPSKTvgGT9cdzyB-wkwNsmFToxT5-Lw"  # –í–∞—à —Ç–æ–∫–µ–Ω —Ç—É—Ç
CHAT_ID = "1075736931"  # –í–∞—à Chat ID —Ç—É—Ç

bot = telebot.TeleBot(TELEGRAM_TOKEN)

stats_fetcher = None
_increment_stat_func = None

# --- URL-–∞–¥—Ä–µ—Å–∏ –¥–ª—è –µ—Ç–∞–ª–æ–Ω–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å ---
# –ó–ê–ú–Ü–ù–Ü–¢–¨ –¶–Ü URL-–ê–î–†–ï–°–ò –ù–ê –†–ï–ê–õ–¨–ù–Ü –ü–û–°–ò–õ–ê–ù–ù–Ø –ù–ê –í–ê–®–Ü –ï–¢–ê–õ–û–ù–ù–Ü –ó–û–ë–†–ê–ñ–ï–ù–ù–Ø (3 –®–¢.)
# –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –ø—Ä—è–º—ñ —Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–æ—Ç–æ–º.
TEMPLATE_IMAGE_URLS_WITH_NAMES = {
    "Map": "https://gachi.gay/StZqB",
    "Road": "https://gachi.gay/4kO7c",
}

PREDEFINED_IMAGE_HASHES = {}  # –°—é–¥–∏ –±—É–¥—É—Ç—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ —Ö–µ—à—ñ –∑ URL
HASH_THRESHOLD = 3  # –ü–æ—Ä—ñ–≥ —Å—Ö–æ–∂–æ—Å—Ç—ñ, –º–æ–∂–Ω–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏


def get_image_hash(image_path):
    """–û–±—á–∏—Å–ª—é—î pHash –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞ –∑–∞–¥–∞–Ω–∏–º —à–ª—è—Ö–æ–º."""
    try:
        with Image.open(image_path) as img:
            return imagehash.phash(img)
    except FileNotFoundError:
        print(f"–ü–æ–º–∏–ª–∫–∞: –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Ö–µ—à—É–≤–∞–Ω–Ω—è - {image_path}")
        return None
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—á–∏—Å–ª–µ–Ω–Ω—ñ —Ö–µ—à–∞ –¥–ª—è {image_path}: {e}")
        return None


def _initialize_template_hashes():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –µ—Ç–∞–ª–æ–Ω–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞ URL, –æ–±—á–∏—Å–ª—é—î —ó—Ö —Ö–µ—à—ñ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î."""
    print("‚è≥ –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –µ—Ç–∞–ª–æ–Ω–Ω–∏—Ö —Ö–µ—à—ñ–≤...")
    for name, url in TEMPLATE_IMAGE_URLS_WITH_NAMES.items():
        temp_file_path = None
        try:
            print(f"  –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –µ—Ç–∞–ª–æ–Ω—É '{name}' –∑ {url}...")
            response = requests.get(url, stream=True, timeout=20)  # –ó–±—ñ–ª—å—à–µ–Ω–æ —Ç–∞–π–º–∞—É—Ç
            response.raise_for_status()  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ HTTP –ø–æ–º–∏–ª–∫–∏ (4xx, 5xx)

            content_type = response.headers.get('Content-Type', '').lower()
            if 'png' in content_type:
                suffix = '.png'
            elif 'jpeg' in content_type or 'jpg' in content_type:
                suffix = '.jpg'
            elif 'gif' in content_type:
                suffix = '.gif'
            elif 'webp' in content_type:
                suffix = '.webp'
            else:
                print(
                    f"  –£–≤–∞–≥–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Ç–∏–ø —Ñ–∞–π–ª—É –¥–ª—è '{name}' –∑ Content-Type: {content_type}. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è .tmp")
                suffix = '.tmp'

            with tempfile.NamedTemporaryFile(delete=False, suffix=suffix) as temp_file:
                for chunk in response.iter_content(chunk_size=8192):
                    temp_file.write(chunk)
                temp_file_path = temp_file.name

            print(f"  –û–±—á–∏—Å–ª–µ–Ω–Ω—è —Ö–µ—à–∞ –¥–ª—è –µ—Ç–∞–ª–æ–Ω—É '{name}' (—Ñ–∞–π–ª: {temp_file_path})...")
            img_hash = get_image_hash(temp_file_path)

            if img_hash:
                PREDEFINED_IMAGE_HASHES[name] = img_hash
                print(f"  ‚úÖ –ï—Ç–∞–ª–æ–Ω '{name}' —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Ç–∞ —Ö–µ—à–æ–≤–∞–Ω–æ: {img_hash}")
            else:
                print(
                    f"  ‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—á–∏—Å–ª–∏—Ç–∏ —Ö–µ—à –¥–ª—è –µ—Ç–∞–ª–æ–Ω—É '{name}' –∑ {url}. –ú–æ–∂–ª–∏–≤–æ, —Ñ–∞–π–ª –Ω–µ —î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º –∞–±–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π.")

        except requests.exceptions.Timeout:
            print(f"  ‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –µ—Ç–∞–ª–æ–Ω—É '{name}' –∑ {url}.")
        except requests.exceptions.RequestException as e:
            print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –µ—Ç–∞–ª–æ–Ω—É '{name}' –∑ {url}: {e}")
        except Exception as e:  # –Ü–Ω—à—ñ –º–æ–∂–ª–∏–≤—ñ –ø–æ–º–∏–ª–∫–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∑ Pillow)
            print(f"  ‚ùå –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –µ—Ç–∞–ª–æ–Ω—É '{name}' ({url}): {e}")
        finally:
            if temp_file_path and os.path.exists(temp_file_path):
                try:
                    os.remove(temp_file_path)
                    print(f"  üóëÔ∏è –¢–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª {temp_file_path} –¥–ª—è '{name}' –≤–∏–¥–∞–ª–µ–Ω–æ.")
                except Exception as e:
                    print(f"  –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É {temp_file_path}: {e}")

    # –ü—ñ–¥—Å—É–º–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    if not PREDEFINED_IMAGE_HASHES:
        print(
            "‚ÄºÔ∏è –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ñ–û–î–ù–û–ì–û –µ—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ —Ö–µ—à–∞. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ö–æ–∂–æ—Å—Ç—ñ –∑ –µ—Ç–∞–ª–æ–Ω–∞–º–∏ –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ.")
    elif len(PREDEFINED_IMAGE_HASHES) < len(TEMPLATE_IMAGE_URLS_WITH_NAMES):
        print(
            f"‚ö†Ô∏è –£–í–ê–ì–ê: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –ª–∏—à–µ {len(PREDEFINED_IMAGE_HASHES)} –∑ {len(TEMPLATE_IMAGE_URLS_WITH_NAMES)} –æ—á—ñ–∫—É–≤–∞–Ω–∏—Ö –µ—Ç–∞–ª–æ–Ω–Ω–∏—Ö —Ö–µ—à—ñ–≤. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Å—Ö–æ–∂—ñ—Å—Ç—å –±—É–¥–µ –æ–±–º–µ–∂–µ–Ω–æ—é.")
    else:
        print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Ç–∞ —Ö–µ—à–æ–≤–∞–Ω–æ {len(PREDEFINED_IMAGE_HASHES)} –µ—Ç–∞–ª–æ–Ω–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å.")
    print("üèÅ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –µ—Ç–∞–ª–æ–Ω–Ω–∏—Ö —Ö–µ—à—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


# –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –º–æ–¥—É–ª—è (—Ç–æ–±—Ç–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ –±–æ—Ç–∞)
_initialize_template_hashes()


def send_telegram_preview(url, content_type):
    global _increment_stat_func
    try:
        response = requests.get(url, stream=True, timeout=10)
        if response.status_code != 200:
            raise Exception("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª")

        file_extension = ".png" if "png" in content_type.lower() else ".jpg" if content_type.startswith(
            "image/") else ".mp4"

        with tempfile.NamedTemporaryFile(delete=False, suffix=file_extension) as temp_file:
            for chunk in response.iter_content(chunk_size=1024):
                temp_file.write(chunk)
            temp_file_path = temp_file.name

        should_send = True

        if content_type.startswith("image/"):
            current_hash = get_image_hash(temp_file_path)

            if current_hash is not None and PREDEFINED_IMAGE_HASHES:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –µ—Ç–∞–ª–æ–Ω–Ω—ñ —Ö–µ—à—ñ
                closest_diff = float('inf')
                closest_template_name = None

                for template_name, predefined_hash in PREDEFINED_IMAGE_HASHES.items():
                    diff = current_hash - predefined_hash
                    if diff < closest_diff:
                        closest_diff = diff
                        closest_template_name = template_name

                if closest_diff < HASH_THRESHOLD:
                    print(
                        f"‚è© –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è '{url}', —Å—Ö–æ–∂–µ –Ω–∞ –µ—Ç–∞–ª–æ–Ω '{closest_template_name}' (—Ä—ñ–∑–Ω–∏—Ü—è: {closest_diff})")
                    bot.send_message(
                        CHAT_ID,
                        f"üö´ –ü—Ä–æ–ø—É—â–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —Å—Ö–æ–∂–µ –Ω–∞ –µ—Ç–∞–ª–æ–Ω '{closest_template_name}':\n"
                        f"–ù–æ–≤–µ: {url}\n"
                        f"–†—ñ–≤–µ–Ω—å —Å—Ö–æ–∂–æ—Å—Ç—ñ: {closest_diff}/{HASH_THRESHOLD}",
                        disable_web_page_preview=True
                    )
                    should_send = False
                    if _increment_stat_func:
                        _increment_stat_func("found_similar")
            elif current_hash is not None and not PREDEFINED_IMAGE_HASHES:
                print(
                    "–£–≤–∞–≥–∞: –ü–æ–ø–µ—Ä–µ–¥–Ω—å–æ –≤–∏–∑–Ω–∞—á–µ–Ω—ñ –µ—Ç–∞–ª–æ–Ω–Ω—ñ —Ö–µ—à—ñ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Å—Ö–æ–∂—ñ—Å—Ç—å –∑ –µ—Ç–∞–ª–æ–Ω–∞–º–∏ –Ω–µ–º–æ–∂–ª–∏–≤–∞.")

            # –û–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (—Ä–µ—Å–∞–π–∑ + –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è)
            with Image.open(temp_file_path) as img:
                max_size = 1280
                if img.width > max_size or img.height > max_size:
                    scale = max_size / max(img.width, img.height)
                    new_size = (int(img.width * scale), int(img.height * scale))
                    img = img.resize(new_size, Image.Resampling.LANCZOS)

                    save_format = "PNG" if img.mode == 'RGBA' else "JPEG"
                    img.save(temp_file_path, format=save_format)

        if should_send:
            if content_type.startswith("image/"):
                with open(temp_file_path, 'rb') as photo:
                    bot.send_photo(CHAT_ID, photo, caption=f"üì∏ –ó–Ω–∞–π–¥–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:\n{url}")
            elif content_type.startswith("video/"):
                with open(temp_file_path, 'rb') as video:
                    bot.send_video(CHAT_ID, video, caption=f"üé• –ó–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥–µ–æ:\n{url}")

        if os.path.exists(temp_file_path):
            os.remove(temp_file_path)

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ send_telegram_preview –¥–ª—è {url}: {e}")
        # –ù–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≤ —á–∞—Ç —Ç—É—Ç –º–æ–∂–µ –±—É—Ç–∏ –Ω–∞–¥—Ç–æ —á–∞—Å—Ç–æ, —è–∫—â–æ URL —á–∞—Å—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ
        # bot.send_message(CHAT_ID, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ {url}: {str(e)}")


@bot.message_handler(commands=['start'])
def handle_start(message):
    if str(message.chat.id) != CHAT_ID:
        return
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"))
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Ç! –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:", reply_markup=keyboard)


@bot.message_handler(func=lambda msg: msg.text == "üìä –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
def handle_stats(message):
    if str(message.chat.id) != CHAT_ID:
        return
    stats = stats_fetcher() if stats_fetcher else {"found_new": 0, "found_repeat": 0, "found_similar": 0}
    response = (
        "üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—à—É–∫—É:*\n"
        f"üîπ –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∑–Ω–∞–π–¥–µ–Ω–æ: *{stats.get('found_new', 0)}*\n"
        f"üîÅ –ü–æ–≤—Ç–æ—Ä—ñ–≤: *{stats.get('found_repeat', 0)}*\n"
        f"üëØ –°—Ö–æ–∂–∏—Ö (–Ω–∞ –µ—Ç–∞–ª–æ–Ω–∏) –ø—Ä–æ–ø—É—â–µ–Ω–æ: *{stats.get('found_similar', 0)}*"
    )
    bot.send_message(message.chat.id, response, parse_mode="Markdown")


def run_bot(fetch_stats_func, increment_stat_func):
    global stats_fetcher, _increment_stat_func
    stats_fetcher = fetch_stats_func
    _increment_stat_func = increment_stat_func
    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞—Ç—É—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ö–µ—à—ñ–≤ —Ç–µ–ø–µ—Ä –¥—Ä—É–∫—É—é—Ç—å—Å—è –≤ _initialize_template_hashes()
    print("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ (–ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –µ—Ç–∞–ª–æ–Ω—ñ–≤).")
    bot.infinity_polling()
