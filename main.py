import threading
import time
import requests
import random
import string
import psycopg2
from concurrent.futures import ThreadPoolExecutor
import telegram_bot
from colorama import init, Fore

init(autoreset=True)

# üîå –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL (Railway)
DB_URL = "postgresql://postgres:lXAsHodiOczWkRVNUrJCRVsyXHKnATgL@trolley.proxy.rlwy.net:14294/railway"
conn = psycopg2.connect(DB_URL)
cursor = conn.cursor()

# üîß –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î
def init_db():
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS links (
            url TEXT PRIMARY KEY,
            found_at TIMESTAMP DEFAULT NOW()
        );
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS stats (
            key TEXT PRIMARY KEY,
            value INTEGER NOT NULL
        );
    """)
    for key in ["found_new", "found_repeat", "found_similar"]:
        cursor.execute("INSERT INTO stats (key, value) VALUES (%s, 0) ON CONFLICT (key) DO NOTHING;", (key,))
    conn.commit()

# üî° –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö URL
def generate_random_string(length=5):
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))

# üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ URL –¥—ñ–π—Å–Ω–∏–π —ñ –º—ñ—Å—Ç–∏—Ç—å –º–µ–¥—ñ–∞
def check_media_url(url):
    try:
        response = requests.head(url, allow_redirects=True, timeout=5)
        if response.status_code != 200:
            return False, None
        content_type = response.headers.get('Content-Type', '')
        if content_type.startswith('image/') or content_type.startswith('video/'):
            return True, content_type
        return False, None
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ URL: {e}")
        return False, None

# ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∂–µ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π
def is_link_found(url):
    cursor.execute("SELECT 1 FROM links WHERE url = %s;", (url,))
    return cursor.fetchone() is not None

# üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
def save_link(url):
    cursor.execute("INSERT INTO links (url) VALUES (%s) ON CONFLICT DO NOTHING;", (url,))
    conn.commit()

# üìä –ó–±—ñ–ª—å—à–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def increment_stat(key):
    cursor.execute("UPDATE stats SET value = value + 1 WHERE key = %s;", (key,))
    conn.commit()

# üìà –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
def get_stats():
    cursor.execute("SELECT key, value FROM stats;")
    rows = cursor.fetchall()
    return {row[0]: row[1] for row in rows}

# üßµ –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ–¥–Ω–æ–≥–æ URL
def process_url():
    thread_name = threading.current_thread().name
    rand = generate_random_string()
    url = f"https://gachi.gay/{rand}"
    found, content_type = check_media_url(url)

    if found:
        if is_link_found(url):
            print(Fore.YELLOW + f"[{thread_name}] –ü–æ–≤—Ç–æ—Ä–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: {url}")
            increment_stat("found_repeat")
        else:
            print(Fore.GREEN + f"[{thread_name}] –ó–Ω–∞–π–¥–µ–Ω–æ. –ü–æ—Å–∏–ª–∞–Ω–Ω—è: {url}")
            save_link(url)
            increment_stat("found_new")
            telegram_bot.send_telegram_preview(url, content_type)
    else:
        print(Fore.RED + f"[{thread_name}] –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ {url}")


# üîÅ –ë–µ–∑–∫—ñ–Ω–µ—á–Ω–∏–π —Ü–∏–∫–ª –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–∞–¥–∞—á —É –ø—É–ª
def start_search():
    executor = ThreadPoolExecutor(max_workers=5)  # –ú–æ–∂–Ω–∞ –∑–±—ñ–ª—å—à–∏—Ç–∏ –¥–æ 10‚Äì20, –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø–æ—Ç—É–∂–Ω–æ—Å—Ç—ñ
    while True:
        executor.submit(process_url)
        time.sleep(0.05)  # –Ü–Ω—Ç–µ—Ä–≤–∞–ª –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –Ω–æ–≤–∏—Ö URL. –ó–º–µ–Ω—à ‚Äî —à–≤–∏–¥—à–µ, –∞–ª–µ –æ–±–µ—Ä–µ–∂–Ω–æ –∑ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º.

# üöÄ –°—Ç–∞—Ä—Ç–æ–≤–∞ —Ç–æ—á–∫–∞
def main():
    init_db()
    threading.Thread(target=start_search, daemon=True).start()
    telegram_bot.run_bot(get_stats, increment_stat)

if __name__ == "__main__":
    main()
